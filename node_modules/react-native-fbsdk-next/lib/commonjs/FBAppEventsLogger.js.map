{"version":3,"sources":["FBAppEventsLogger.js"],"names":["AppEventsLogger","require","NativeModules","FBAppEventsLogger","Platform","isDefined","isNumber","isOneOf","isString","AppEvents","AppEventParams","getConstants","module","exports","setFlushBehavior","flushBehavior","logEvent","eventName","args","valueToSum","shift","parameters","logPurchase","purchaseAmount","currencyCode","logPushNotificationOpen","payload","logProductItem","itemID","availability","condition","description","imageLink","link","title","priceAmount","currency","gtin","mpn","brand","Error","flush","setUserID","userID","getUserID","getAnonymousID","getAdvertiserID","getAttributionID","OS","updateUserProperties","setUserData","userData","setPushNotificationsDeviceToken","deviceToken","setPushNotificationsRegistrationId","registrationId"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\nconst {Platform} = require('react-native');\nconst {isDefined, isNumber, isOneOf, isString} = require('./util/validate');\n\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\ntype AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\n\n/**\n * Specifies product availability for Product Catalog product item update\n */\ntype ProductAvailability =\n  /**\n   * Item ships immediately\n   */\n  | 'in_stock'\n  /**\n   * No plan to restock\n   */\n  | 'out_of_stock'\n  /**\n   * Available in future\n   */\n  | 'preorder'\n  /**\n   * Ships in 1-2 weeks\n   */\n  | 'avaliable_for_order'\n  /**\n   * Discontinued\n   */\n  | 'discontinued';\n\n/**\n * Specifies product condition for Product Catalog product item update\n */\ntype ProductCondition = 'new' | 'refurbished' | 'used';\n\ntype Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\ntype UserData = $ReadOnly<{|\n  email?: ?string,\n  firstName?: ?string,\n  lastName?: ?string,\n  phone?: ?string,\n  dateOfBirth?: ?string,\n  gender?: ?('m' | 'f'),\n  city?: ?string,\n  state?: ?string,\n  zip?: ?string,\n  country?: ?string,\n|}>;\n\ntype AppEvent = {\n  AchievedLevel: string,\n  AdClick: string,\n  AdImpression: string,\n  AddedPaymentInfo: string,\n  AddedToCart: string,\n  AddedToWishlist: string,\n  CompletedRegistration: string,\n  CompletedTutorial: string,\n  Contact: string,\n  CustomizeProduct: string,\n  Donate: string,\n  FindLocation: string,\n  InitiatedCheckout: string,\n  Purchased: string,\n  Rated: string,\n  Searched: string,\n  SpentCredits: string,\n  Schedule: string,\n  StartTrial: string,\n  SubmitApplication: string,\n  Subscribe: string,\n  UnlockedAchievement: string,\n  ViewedContent: string,\n};\n\ntype AppEventParam = {\n  AddType: string,\n  Content: string,\n  ContentID: string,\n  ContentType: string,\n  Currency: string,\n  Description: string,\n  Level: string,\n  NumItems: string,\n  MaxRatingValue: string,\n  OrderId: string,\n  PaymentInfoAvailable: string,\n  RegistrationMethod: string,\n  SearchString: string,\n  Success: string,\n  ValueNo: string,\n  ValueYes: string,\n};\n\nconst {\n  AppEvents,\n  AppEventParams,\n}: {\n  AppEvents: AppEvent,\n  AppEventParams: AppEventParam,\n} = AppEventsLogger.getConstants();\n\nmodule.exports = {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: ?Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload: ?Object) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Uploads product catalog product item as an app event\n   * @param itemID – Unique ID for the item. Can be a variant for a product. Max size is 100.\n   * @param availability – If item is in stock. Accepted values are: in stock - Item ships immediately out of stock - No plan to restock preorder - Available in future available for order - Ships in 1-2 weeks discontinued - Discontinued\n   * @param condition – Product condition: new, refurbished or used.\n   * @param description – Short text describing product. Max size is 5000.\n   * @param imageLink – Link to item image used in ad.\n   * @param link – Link to merchant's site where someone can buy the item.\n   * @param title – Title of item.\n   * @param priceAmount – Amount of purchase, in the currency specified by the 'currency' parameter. This value will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).\n   * @param currency – Currency used to specify the amount.\n   * @param gtin – Global Trade Item Number including UPC, EAN, JAN and ISBN\n   * @param mpn – Unique manufacture ID for product\n   * @param brand – Name of the brand Note: Either gtin, mpn or brand is required.\n   * @param parameters – Optional fields for deep link specification.\n   */\n  logProductItem(\n    itemID: string,\n    availability: ProductAvailability,\n    condition: ProductCondition,\n    description: string,\n    imageLink: string,\n    link: string,\n    title: string,\n    priceAmount: number,\n    currency: string,\n    gtin?: ?string,\n    mpn?: ?string,\n    brand?: ?string,\n    parameters?: ?Params,\n  ) {\n    if (!isDefined(itemID) || !isString(itemID)) {\n      throw new Error(\"logProductItem expected 'itemID' to be a string\");\n    }\n    if (\n      !isDefined(availability) ||\n      !isOneOf(availability, [\n        'in_stock',\n        'out_of_stock',\n        'preorder',\n        'avaliable_for_order',\n        'discontinued',\n      ])\n    ) {\n      throw new Error(\n        \"logProductItem expected 'availability' to be one of 'in_stock' | 'out_of_stock' | 'preorder' | 'avaliable_for_order' | 'discontinued'\",\n      );\n    }\n    if (\n      !isDefined(condition) ||\n      !isOneOf(condition, ['new', 'refurbished', 'used'])\n    ) {\n      throw new Error(\n        \"logProductItem expected 'condition' to be one of 'new' | 'refurbished' | 'used'\",\n      );\n    }\n    if (!isDefined(description) || !isString(description)) {\n      throw new Error(\"logProductItem expected 'description' to be a string\");\n    }\n    if (!isDefined(imageLink) || !isString(imageLink)) {\n      throw new Error(\"logProductItem expected 'imageLink' to be a string\");\n    }\n    if (!isDefined(link) || !isString(link)) {\n      throw new Error(\"logProductItem expected 'link' to be a string\");\n    }\n    if (!isDefined(title) || !isString(title)) {\n      throw new Error(\"logProductItem expected 'title' to be a string\");\n    }\n    if (!isDefined(priceAmount) || !isNumber(priceAmount)) {\n      throw new Error(\"logProductItem expected 'priceAmount' to be a number\");\n    }\n    if (!isDefined(currency) || !isString(currency)) {\n      throw new Error(\"logProductItem expected 'currency' to be a string\");\n    }\n    if (!isDefined(gtin) && !isDefined(mpn) && !isDefined(brand)) {\n      throw new Error(\n        'logProductItem expected either gtin, mpn or brand to be defined',\n      );\n    }\n\n    AppEventsLogger.logProductItem(\n      itemID,\n      availability,\n      condition,\n      description,\n      imageLink,\n      link,\n      title,\n      priceAmount,\n      currency,\n      gtin,\n      mpn,\n      brand,\n      parameters,\n    );\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until it is cleared by passing nil.\n   */\n  setUserID(userID: string | null) {\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<?string> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Returns anonymous id or null if not set\n   */\n  async getAnonymousID(): Promise<?string> {\n    return await AppEventsLogger.getAnonymousID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set\n   */\n  async getAdvertiserID(): Promise<?string> {\n    return await AppEventsLogger.getAdvertiserID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set.\n   * @platform android\n   */\n  async getAttributionID(): Promise<?string> {\n    if (Platform.OS === 'ios') {\n      return null;\n    }\n    return await AppEventsLogger.getAttributionID();\n  },\n\n  /**\n   * Sends a request to update the properties for the current user, set by\n   * setUserID. You must call setUserID before making this call.\n   */\n  updateUserProperties(parameters: Params) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n\n  /**\n   * Predefined event names for logging events common to many apps.\n   */\n  AppEvents,\n\n  /**\n   *  Predefined event name parameters for common additional information to accompany events logged through the `logEvent`.\n   */\n  AppEventParams,\n};\n"]}